#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ development –±–∞–∑—ã –≤ production –±–∞–∑—É
"""

import os
import json
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
DEV_DATABASE_URL = os.getenv("DATABASE_URL")  # Development –±–∞–∑–∞
PROD_DATABASE_URL = "postgresql://neondb_owner:npg_9BH3JEMRwQna@ep-bitter-lake-a69kivks.us-west-2.aws.neon.tech/neondb?sslmode=require"  # Production –±–∞–∑–∞

def connect_to_db(database_url, db_name):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        engine = create_engine(database_url, pool_pre_ping=True)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        session = SessionLocal()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {db_name} –±–∞–∑–µ —É—Å–ø–µ—à–Ω–æ")
        return session, engine
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {db_name} –±–∞–∑–µ: {e}")
        return None, None

def export_from_dev():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ dev –±–∞–∑—ã"""
    print("üîÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ development –±–∞–∑—ã...")
    
    if not DEV_DATABASE_URL:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
        
    dev_session, dev_engine = connect_to_db(DEV_DATABASE_URL, "development")
    if not dev_session:
        return None
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤
        tests_result = dev_session.execute(text("""
            SELECT id, name, description, created_at 
            FROM tests 
            ORDER BY created_at
        """))
        tests = [dict(row._mapping) for row in tests_result]
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(tests)} —Ç–µ—Å—Ç–æ–≤")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_result = dev_session.execute(text("""
            SELECT id, test_id, title, text, created_at 
            FROM questions 
            ORDER BY created_at
        """))
        questions = [dict(row._mapping) for row in questions_result]
        print(f"   ‚ùì –ù–∞–π–¥–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        options_result = dev_session.execute(text("""
            SELECT id, question_id, text, is_correct, comment 
            FROM answer_options 
            ORDER BY id
        """))
        answer_options = [dict(row._mapping) for row in options_result]
        print(f"   üîò –ù–∞–π–¥–µ–Ω–æ {len(answer_options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
        
        data = {
            "tests": tests,
            "questions": questions,
            "answer_options": answer_options,
            "export_time": datetime.now().isoformat()
        }
        
        return data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return None
    finally:
        dev_session.close()
        dev_engine.dispose()

def import_to_production(data):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ production –±–∞–∑—É"""
    print("üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ production –±–∞–∑—É...")
    
    if not PROD_DATABASE_URL:
        print("‚ùå PROD_DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –±–∞–∑—É —á—Ç–æ –∏ dev.")
        prod_url = DEV_DATABASE_URL
    else:
        prod_url = PROD_DATABASE_URL
        
    prod_session, prod_engine = connect_to_db(prod_url, "production")
    if not prod_session:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        print("üèóÔ∏è  –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...")
        
        prod_session.execute(text("""
            CREATE TABLE IF NOT EXISTS tests (
                id VARCHAR PRIMARY KEY,
                name VARCHAR NOT NULL,
                description TEXT DEFAULT '',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """))
        
        prod_session.execute(text("""
            CREATE TABLE IF NOT EXISTS questions (
                id VARCHAR PRIMARY KEY,
                test_id VARCHAR NOT NULL REFERENCES tests(id) ON DELETE CASCADE,
                title VARCHAR NOT NULL,
                text TEXT NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """))
        
        prod_session.execute(text("""
            CREATE TABLE IF NOT EXISTS answer_options (
                id VARCHAR PRIMARY KEY,
                question_id VARCHAR NOT NULL REFERENCES questions(id) ON DELETE CASCADE,
                text TEXT NOT NULL,
                is_correct BOOLEAN NOT NULL,
                comment TEXT NOT NULL
            )
        """))
        
        prod_session.commit()
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü –≥–æ—Ç–æ–≤–∞")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üóëÔ∏è  –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        prod_session.execute(text("DELETE FROM answer_options"))
        prod_session.execute(text("DELETE FROM questions"))
        prod_session.execute(text("DELETE FROM tests"))
        prod_session.commit()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã...")
        for test in data["tests"]:
            prod_session.execute(text("""
                INSERT INTO tests (id, name, description, created_at) 
                VALUES (:id, :name, :description, :created_at)
            """), test)
        print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data['tests'])} —Ç–µ—Å—Ç–æ–≤")
        
        print("‚ùì –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã...")
        for question in data["questions"]:
            prod_session.execute(text("""
                INSERT INTO questions (id, test_id, title, text, created_at) 
                VALUES (:id, :test_id, :title, :text, :created_at)
            """), question)
        print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        print("üîò –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...")
        for option in data["answer_options"]:
            prod_session.execute(text("""
                INSERT INTO answer_options (id, question_id, text, is_correct, comment) 
                VALUES (:id, :question_id, :text, :is_correct, :comment)
            """), option)
        print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data['answer_options'])} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        
        prod_session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        test_count = prod_session.execute(text("SELECT COUNT(*) FROM tests")).scalar()
        question_count = prod_session.execute(text("SELECT COUNT(*) FROM questions")).scalar()
        option_count = prod_session.execute(text("SELECT COUNT(*) FROM answer_options")).scalar()
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í production –±–∞–∑–µ:")
        print(f"   üìã –¢–µ—Å—Ç–æ–≤: {test_count}")
        print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}")
        print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {option_count}")
        
        return True
        
    except Exception as e:
        prod_session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    finally:
        prod_session.close()
        prod_engine.dispose()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ DEV –≤ PRODUCTION")
    print("=" * 50)
    
    print(f"üîó DEV –±–∞–∑–∞: {DEV_DATABASE_URL.split('@')[1] if DEV_DATABASE_URL and '@' in DEV_DATABASE_URL else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    print(f"üîó PROD –±–∞–∑–∞: {PROD_DATABASE_URL.split('@')[1] if PROD_DATABASE_URL and '@' in PROD_DATABASE_URL else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º DEV)'}")
    print()
    
    # –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ dev
    data = export_from_dev()
    if not data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ dev –±–∞–∑—ã")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞
    backup_file = f"prod_transfer_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(backup_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2, default=str)
    print(f"üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {backup_file}")
    
    # –ò–º–ø–æ—Ä—Ç –≤ production
    success = import_to_production(data)
    
    if success:
        print("=" * 50)
        print("üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ production –±–∞–∑—É!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if data["tests"]:
            print("\nüìã –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for test in data["tests"]:
                questions_count = len([q for q in data["questions"] if q["test_id"] == test["id"]])
                print(f"   ‚Ä¢ {test['name']} ({questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤)")
    else:
        print("=" * 50)
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()