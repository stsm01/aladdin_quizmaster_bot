#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏ –≤ –ø—Ä–æ–¥–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç: —Ç–µ—Å—Ç—ã, –≤–æ–ø—Ä–æ—Å—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
"""

import json
import os
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
DEV_DATABASE_URL = os.getenv("DATABASE_URL")
PROD_DATABASE_URL = os.getenv("PROD_DATABASE_URL", DEV_DATABASE_URL)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ë–î –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–≤–∞—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞

def create_db_session(database_url):
    """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    engine = create_engine(database_url, pool_pre_ping=True)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    return SessionLocal(), engine

def export_tests_data():
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤...")
    
    dev_session, dev_engine = create_db_session(DEV_DATABASE_URL)
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤
        tests_result = dev_session.execute(text("""
            SELECT id, name, description, created_at 
            FROM tests 
            ORDER BY created_at
        """))
        tests = [dict(row._mapping) for row in tests_result]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tests)} —Ç–µ—Å—Ç–æ–≤")
        
        all_data = {"tests": tests, "questions": [], "answer_options": []}
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        for test in tests:
            test_id = test['id']
            print(f"üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ '{test['name']}'...")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
            questions_result = dev_session.execute(text("""
                SELECT id, test_id, title, text, created_at 
                FROM questions 
                WHERE test_id = :test_id 
                ORDER BY created_at
            """), {"test_id": test_id})
            
            questions = [dict(row._mapping) for row in questions_result]
            all_data["questions"].extend(questions)
            print(f"   ‚úÖ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
            for question in questions:
                question_id = question['id']
                
                options_result = dev_session.execute(text("""
                    SELECT id, question_id, text, is_correct, comment 
                    FROM answer_options 
                    WHERE question_id = :question_id 
                    ORDER BY id
                """), {"question_id": question_id})
                
                options = [dict(row._mapping) for row in options_result]
                all_data["answer_options"].extend(options)
        
        print(f"‚úÖ –í—Å–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print(f"   üìã –¢–µ—Å—Ç–æ–≤: {len(all_data['tests'])}")
        print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {len(all_data['questions'])}")
        print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {len(all_data['answer_options'])}")
        
        return all_data
        
    finally:
        dev_session.close()
        dev_engine.dispose()

def import_to_production(data):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–æ–≤—É—é –±–∞–∑—É"""
    print("üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–¥–æ–≤—É—é –±–∞–∑—É...")
    
    prod_session, prod_engine = create_db_session(PROD_DATABASE_URL)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑—ã...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        prod_session.execute(text("""
            CREATE TABLE IF NOT EXISTS tests (
                id VARCHAR PRIMARY KEY,
                name VARCHAR NOT NULL,
                description TEXT DEFAULT '',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """))
        
        prod_session.execute(text("""
            CREATE TABLE IF NOT EXISTS questions (
                id VARCHAR PRIMARY KEY,
                test_id VARCHAR NOT NULL REFERENCES tests(id),
                title VARCHAR NOT NULL,
                text TEXT NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """))
        
        prod_session.execute(text("""
            CREATE TABLE IF NOT EXISTS answer_options (
                id VARCHAR PRIMARY KEY,
                question_id VARCHAR NOT NULL REFERENCES questions(id),
                text TEXT NOT NULL,
                is_correct BOOLEAN NOT NULL,
                comment TEXT NOT NULL
            )
        """))
        
        prod_session.commit()
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü –≥–æ—Ç–æ–≤–∞")
        
        # –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤
        print("üìã –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã...")
        for test in data["tests"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç
            existing = prod_session.execute(text(
                "SELECT id FROM tests WHERE id = :id"
            ), {"id": test["id"]}).first()
            
            if not existing:
                prod_session.execute(text("""
                    INSERT INTO tests (id, name, description, created_at) 
                    VALUES (:id, :name, :description, :created_at)
                """), {
                    "id": test["id"],
                    "name": test["name"], 
                    "description": test["description"],
                    "created_at": test["created_at"]
                })
                print(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç: {test['name']}")
            else:
                print(f"   ‚è≠Ô∏è  –¢–µ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {test['name']}")
        
        # –ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        print("‚ùì –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã...")
        for question in data["questions"]:
            existing = prod_session.execute(text(
                "SELECT id FROM questions WHERE id = :id"
            ), {"id": question["id"]}).first()
            
            if not existing:
                prod_session.execute(text("""
                    INSERT INTO questions (id, test_id, title, text, created_at) 
                    VALUES (:id, :test_id, :title, :text, :created_at)
                """), {
                    "id": question["id"],
                    "test_id": question["test_id"],
                    "title": question["title"],
                    "text": question["text"],
                    "created_at": question["created_at"]
                })
        
        print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –ò–º–ø–æ—Ä—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        print("üîò –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤...")
        for option in data["answer_options"]:
            existing = prod_session.execute(text(
                "SELECT id FROM answer_options WHERE id = :id"
            ), {"id": option["id"]}).first()
            
            if not existing:
                prod_session.execute(text("""
                    INSERT INTO answer_options (id, question_id, text, is_correct, comment) 
                    VALUES (:id, :question_id, :text, :is_correct, :comment)
                """), {
                    "id": option["id"],
                    "question_id": option["question_id"],
                    "text": option["text"],
                    "is_correct": option["is_correct"],
                    "comment": option["comment"]
                })
        
        print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(data['answer_options'])} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
        
        prod_session.commit()
        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–¥–æ–≤—É—é –±–∞–∑—É!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        test_count = prod_session.execute(text("SELECT COUNT(*) FROM tests")).scalar()
        question_count = prod_session.execute(text("SELECT COUNT(*) FROM questions")).scalar()
        option_count = prod_session.execute(text("SELECT COUNT(*) FROM answer_options")).scalar()
        
        print(f"üìä –ò—Ç–æ–≥–æ –≤ –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑–µ:")
        print(f"   üìã –¢–µ—Å—Ç–æ–≤: {test_count}")
        print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}")
        print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {option_count}")
        
    except Exception as e:
        prod_session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        raise
    finally:
        prod_session.close()
        prod_engine.dispose()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–æ–¥–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏
    data = export_tests_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –¥–ª—è –±—ç–∫–∞–ø–∞
    backup_file = f"tests_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(backup_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2, default=str)
    print(f"üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {backup_file}")
    
    # –ò–º–ø–æ—Ä—Ç –≤ –ø—Ä–æ–¥–æ–≤—É—é –±–∞–∑—É
    import_to_production(data)
    
    print("=" * 50)
    print("üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()