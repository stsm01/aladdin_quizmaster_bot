#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ü–†–û–î–û–í–û–ô –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# URL –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑—ã
PROD_DATABASE_URL = "postgresql://neondb_owner:npg_9BH3JEMRwQna@ep-bitter-lake-a69kivks.us-west-2.aws.neon.tech/neondb?sslmode=require"

def check_production_db():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üè≠ –ü–†–û–í–ï–†–ö–ê –ü–†–û–î–û–í–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    print(f"üîó URL: ep-bitter-lake-a69kivks.us-west-2.aws.neon.tech")
    print()
    
    try:
        engine = create_engine(PROD_DATABASE_URL, pool_pre_ping=True)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        session = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        tables_result = session.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """))
        tables = [row[0] for row in tables_result]
        print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑–µ: {', '.join(tables) if tables else '–ù–ï–¢ –¢–ê–ë–õ–ò–¶'}")
        print()
        
        if not tables:
            print("‚ùå –ü—Ä–æ–¥–æ–≤–∞—è –±–∞–∑–∞ –ø—É—Å—Ç–∞—è! –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
            return
            
        if 'tests' not in tables:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'tests' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑–µ!")
            return
            
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
        test_count = session.execute(text("SELECT COUNT(*) FROM tests")).scalar()
        question_count = session.execute(text("SELECT COUNT(*) FROM questions")).scalar() if 'questions' in tables else 0
        option_count = session.execute(text("SELECT COUNT(*) FROM answer_options")).scalar() if 'answer_options' in tables else 0
        
        print("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–û–î–û–í–û–ô –ë–ê–ó–´:")
        print(f"   üìã –¢–µ—Å—Ç–æ–≤: {test_count}")
        print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}")
        print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {option_count}")
        print()
        
        if test_count > 0:
            print("üìù –¢–ï–°–¢–´ –í –ü–†–û–î–û–í–û–ô –ë–ê–ó–ï:")
            tests_result = session.execute(text("""
                SELECT t.id, t.name, t.description, COUNT(q.id) as questions_count 
                FROM tests t 
                LEFT JOIN questions q ON t.id = q.test_id 
                GROUP BY t.id, t.name, t.description 
                ORDER BY t.created_at
            """))
            
            for i, test in enumerate(tests_result, 1):
                print(f"   {i}. üìã {test[1]}")
                print(f"      üìÑ {test[2]}")
                print(f"      ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test[3]}")
                print(f"      üÜî ID: {test[0]}")
                print()
                
            print("üéâ –ü–†–û–î–û–í–ê–Ø –ë–ê–ó–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
                
        else:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑–µ –ù–ï–¢ –¢–ï–°–¢–û–í!")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python transfer_to_production.py")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if 'users' in tables:
            user_count = session.execute(text("SELECT COUNT(*) FROM users")).scalar()
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑–µ: {user_count}")
            
        if 'quiz_sessions' in tables:
            session_count = session.execute(text("SELECT COUNT(*) FROM quiz_sessions")).scalar()
            print(f"üéØ –°–µ—Å—Å–∏–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑–µ: {session_count}")
        
        session.close()
        engine.dispose()
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–æ–≤–æ–π –±–∞–∑–µ: {e}")
        print()
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")

if __name__ == "__main__":
    check_production_db()