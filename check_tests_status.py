#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

def check_tests():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ"""
    DATABASE_URL = os.getenv("DATABASE_URL")
    engine = create_engine(DATABASE_URL, pool_pre_ping=True)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    session = SessionLocal()
    
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        print(f"üîó Database: {DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else 'local'}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        tables_result = session.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """))
        tables = [row[0] for row in tables_result]
        print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: {', '.join(tables)}")
        
        if 'tests' not in tables:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'tests' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
        test_count = session.execute(text("SELECT COUNT(*) FROM tests")).scalar()
        question_count = session.execute(text("SELECT COUNT(*) FROM questions")).scalar() if 'questions' in tables else 0
        option_count = session.execute(text("SELECT COUNT(*) FROM answer_options")).scalar() if 'answer_options' in tables else 0
        
        print()
        print("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   üìã –¢–µ—Å—Ç–æ–≤: {test_count}")
        print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}")
        print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {option_count}")
        
        if test_count > 0:
            print()
            print("üìù –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã:")
            tests_result = session.execute(text("""
                SELECT t.name, t.description, COUNT(q.id) as questions_count 
                FROM tests t 
                LEFT JOIN questions q ON t.id = q.test_id 
                GROUP BY t.id, t.name, t.description 
                ORDER BY t.created_at
            """))
            
            for test in tests_result:
                print(f"   üìã {test[0]}")
                print(f"      üìÑ {test[1]}")
                print(f"      ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test[2]}")
                print()
                
        else:
            print()
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            print("üí° –ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("   python export_to_production.py")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Å–µ—Å—Å–∏–∏
        if 'users' in tables:
            user_count = session.execute(text("SELECT COUNT(*) FROM users")).scalar()
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {user_count}")
            
        if 'quiz_sessions' in tables:
            session_count = session.execute(text("SELECT COUNT(*) FROM quiz_sessions")).scalar()
            print(f"üéØ –°–µ—Å—Å–∏–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {session_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    finally:
        session.close()
        engine.dispose()

if __name__ == "__main__":
    check_tests()