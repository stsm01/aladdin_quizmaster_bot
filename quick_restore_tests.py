#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±—ç–∫–∞–ø–∞
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø–∞–ª–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
"""

import json
import os
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

def restore_from_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞"""
    
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
    import glob
    backup_files = glob.glob("tests_backup_*.json")
    if not backup_files:
        print("‚ùå –ë—ç–∫–∞–ø —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    latest_backup = max(backup_files)
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ç–∫–∞–ø: {latest_backup}")
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞
    with open(latest_backup, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print(f"üìä –í –±—ç–∫–∞–ø–µ –Ω–∞–π–¥–µ–Ω–æ:")
    print(f"   üìã –¢–µ—Å—Ç–æ–≤: {len(data['tests'])}")
    print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {len(data['questions'])}")
    print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(data['answer_options'])}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    DATABASE_URL = os.getenv("DATABASE_URL")
    engine = create_engine(DATABASE_URL, pool_pre_ping=True)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    session = SessionLocal()
    
    try:
        print("üîÑ –û—á–∏—â–∞–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ foreign keys)
        session.execute(text("DELETE FROM answer_options"))
        session.execute(text("DELETE FROM questions"))  
        session.execute(text("DELETE FROM tests"))
        session.commit()
        print("   üóëÔ∏è  –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç—ã
        for test in data["tests"]:
            session.execute(text("""
                INSERT INTO tests (id, name, description, created_at) 
                VALUES (:id, :name, :description, :created_at)
            """), test)
        print(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(data['tests'])} —Ç–µ—Å—Ç–æ–≤")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for question in data["questions"]:
            session.execute(text("""
                INSERT INTO questions (id, test_id, title, text, created_at) 
                VALUES (:id, :test_id, :title, :text, :created_at)
            """), question)
        print(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(data['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        for option in data["answer_options"]:
            session.execute(text("""
                INSERT INTO answer_options (id, question_id, text, is_correct, comment) 
                VALUES (:id, :question_id, :text, :is_correct, :comment)
            """), option)
        print(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(data['answer_options'])} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤")
        
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        test_count = session.execute(text("SELECT COUNT(*) FROM tests")).scalar()
        question_count = session.execute(text("SELECT COUNT(*) FROM questions")).scalar()
        option_count = session.execute(text("SELECT COUNT(*) FROM answer_options")).scalar()
        
        print("üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –ò—Ç–æ–≥–æ –≤ –±–∞–∑–µ:")
        print(f"   üìã –¢–µ—Å—Ç–æ–≤: {test_count}")
        print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}")
        print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {option_count}")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        raise
    finally:
        session.close()
        engine.dispose()

def check_current_state():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã"""
    DATABASE_URL = os.getenv("DATABASE_URL")
    engine = create_engine(DATABASE_URL, pool_pre_ping=True)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    session = SessionLocal()
    
    try:
        test_count = session.execute(text("SELECT COUNT(*) FROM tests")).scalar()
        question_count = session.execute(text("SELECT COUNT(*) FROM questions")).scalar()
        option_count = session.execute(text("SELECT COUNT(*) FROM answer_options")).scalar()
        
        print("üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã:")
        print(f"   üìã –¢–µ—Å—Ç–æ–≤: {test_count}")
        print(f"   ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {question_count}") 
        print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {option_count}")
        
        if test_count > 0:
            tests = session.execute(text("SELECT name FROM tests")).fetchall()
            print("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã:")
            for test in tests:
                print(f"   - {test[0]}")
        else:
            print("‚ö†Ô∏è  –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
    finally:
        session.close()
        engine.dispose()

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
    check_current_state()
    
    print("\n" + "="*50)
    response = input("–ù—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–∑ –±—ç–∫–∞–ø–∞? (y/N): ")
    
    if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        restore_from_backup()
    else:
        print("‚úã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")