#!/usr/bin/env python3
"""
–ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ PostgreSQL –∏–∑ prod_transfer_*.json

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQLAlchemy-–º–æ–¥–µ–ª–∏ –∏–∑ app/core/database.py –∏ DATABASE_URL –∏–∑ .env.
"""

import argparse
import json
import os
from typing import Any, Dict, List

from dotenv import load_dotenv

# –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Å–µ—Å—Å–∏—é
from app.core.database import (
    SessionLocal,
    Base,
    engine,
    Test as DBTest,
    Question as DBQuestion,
    AnswerOption as DBAnswerOption,
)

def ensure_tables() -> None:
    Base.metadata.create_all(bind=engine)

def import_from_dump(file_path: str) -> None:
    with open(file_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    tests: List[Dict[str, Any]] = data.get("tests", [])
    questions: List[Dict[str, Any]] = data.get("questions", [])
    answer_options: List[Dict[str, Any]] = data.get("answer_options", [])

    db = SessionLocal()
    try:
        # –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤
        for t in tests:
            exists = db.query(DBTest).filter(DBTest.id == t["id"]).first()
            if not exists:
                db.add(DBTest(
                    id=t["id"],
                    name=t["name"],
                    description=t.get("description", ""),
                ))

        db.commit()

        # –ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        for q in questions:
            exists = db.query(DBQuestion).filter(DBQuestion.id == q["id"]).first()
            if not exists:
                db.add(DBQuestion(
                    id=q["id"],
                    test_id=q["test_id"],
                    title=q["title"],
                    text=q["text"],
                ))

        db.commit()

        # –ò–º–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤
        for a in answer_options:
            exists = db.query(DBAnswerOption).filter(DBAnswerOption.id == a["id"]).first()
            if not exists:
                db.add(DBAnswerOption(
                    id=a["id"],
                    question_id=a["question_id"],
                    text=a["text"],
                    is_correct=bool(a["is_correct"]),
                    comment=a.get("comment", ""),
                ))

        db.commit()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
    finally:
        db.close()

def main() -> None:
    parser = argparse.ArgumentParser(description="–ò–º–ø–æ—Ä—Ç –∏–∑ prod_transfer_*.json –≤ PostgreSQL")
    parser.add_argument("--file", required=True, help="–ü—É—Ç—å –∫ JSON –¥–∞–º–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, data/prod_transfer_*.json)")
    args = parser.parse_args()

    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        raise RuntimeError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –°–æ–∑–¥–∞–π—Ç–µ .env –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    print(f"üì¶ –§–∞–π–ª: {args.file}")
    print(f"üóÑÔ∏è  DATABASE_URL: {database_url}")

    ensure_tables()
    import_from_dump(args.file)

if __name__ == "__main__":
    main()


