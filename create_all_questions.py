#!/usr/bin/env python3
"""
Script to create all 19 questions directly from the data
"""

import requests
import json
from typing import List, Dict, Any

# API configuration
API_BASE_URL = "http://localhost:5000"
ADMIN_API_KEY = "admin_secret_key_123"

def get_all_questions() -> List[Dict[str, Any]]:
    """Return all 19 questions with their data"""
    return [
        {
            "id": "Q001",
            "title": "Включение саморегистрации",
            "text": "Где включается возможность самостоятельной регистрации сотрудников для конкретной организации?",
            "options": [
                {
                    "id": "Q001A1",
                    "text": "В админке, во вкладке «Прочие», с помощью галочки «Разрешить самостоятельную регистрацию».",
                    "is_correct": True,
                    "comment": "Именно так включается саморегистрация; без этого на логин-экране не появится вкладка «Регистрация»."
                },
                {
                    "id": "Q001A2",
                    "text": "В карточке провайдера, раздел «Настройки чеков».",
                    "is_correct": False,
                    "comment": "Настройки чеков относятся к НДС и чекам провайдера, а не к саморегистрации сотрудников."
                },
                {
                    "id": "Q001A3",
                    "text": "В пользовательском кабинете сотрудника, раздел «Профиль».",
                    "is_correct": False,
                    "comment": "Саморегистрация настраивается на стороне организации в админке, а не в личном кабинете сотрудника."
                }
            ]
        },
        {
            "id": "Q002",
            "title": "Код приглашения",
            "text": "Как устроен код, необходимый для саморегистрации, и можно ли передать его через ссылку/QR?",
            "options": [
                {
                    "id": "Q002A1",
                    "text": "Код состоит из трёх латинских букв и трёх цифр; его можно вшить в ссылку или QR-код.",
                    "is_correct": True,
                    "comment": "Система генерирует код формата LLLDDD, и для удобства допускается распространение ссылкой/QR."
                },
                {
                    "id": "Q002A2",
                    "text": "Код — произвольная длина, вводится только вручную пользователем.",
                    "is_correct": False,
                    "comment": "В демо зафиксирован конкретный формат и возможность автоподстановки через ссылку/QR."
                },
                {
                    "id": "Q002A3",
                    "text": "Код формируется организацией из её ИНН и КПП.",
                    "is_correct": False,
                    "comment": "Код генерируется системой приглашений, а не вычисляется из реквизитов организации."
                }
            ]
        },
        {
            "id": "Q003",
            "title": "Маршрутизация по кодам",
            "text": "Можно ли с помощью разных кодов автоматически «приземлять» сотрудников в разные группы/грейды/подразделения?",
            "options": [
                {
                    "id": "Q003A1",
                    "text": "Да, создаются несколько приглашений с разными кодами и преднастройками групп/грейдов.",
                    "is_correct": True,
                    "comment": "Именно для этого допускается несколько приглашений — потоки разделяются по коду."
                },
                {
                    "id": "Q003A2",
                    "text": "Нет, код влияет только на срок действия регистрации.",
                    "is_correct": False,
                    "comment": "Срок действия настраивается, но ключевое — привязка к группам/грейдам."
                }
            ]
        },
        {
            "id": "Q004",
            "title": "Обязательные поля заявки",
            "text": "Какие поля являются всегда обязательными при саморегистрации и как управлять остальными?",
            "options": [
                {
                    "id": "Q004A1",
                    "text": "Четыре «классических» поля всегда обязательны и отключить их нельзя; остальные (например, пол, дата рождения, табельный номер) организация может сделать обязательными на своё усмотрение.",
                    "is_correct": True,
                    "comment": "В демо подчёркнута неизменяемая обязательность 4 полей и настраиваемость прочих."
                },
                {
                    "id": "Q004A2",
                    "text": "Все поля можно включать/выключать; обязательных по умолчанию нет.",
                    "is_correct": False,
                    "comment": "Есть фиксированная четвёрка обязательных полей — отключение не предусмотрено."
                },
                {
                    "id": "Q004A3",
                    "text": "Обязательные поля задаются только на уровне провайдера услуг.",
                    "is_correct": False,
                    "comment": "Речь о заявке сотрудника в организации, не о настройках провайдера."
                }
            ]
        },
        {
            "id": "Q005",
            "title": "Подсказки в анкете",
            "text": "Как можно помочь сотруднику корректно заполнить анкету при саморегистрации?",
            "options": [
                {
                    "id": "Q005A1",
                    "text": "Добавить текстовую подсказку и/или картинку; подсказка отображается на шагах ввода данных.",
                    "is_correct": True,
                    "comment": "В подсказку можно поместить инструкции (например, где взять табельный номер)."
                },
                {
                    "id": "Q005A2",
                    "text": "Подсказки нельзя использовать, чтобы не влиять на UX.",
                    "is_correct": False,
                    "comment": "Подсказки — штатный инструмент и специально упоминались в демо."
                }
            ]
        },
        {
            "id": "Q006",
            "title": "Проверки и ограничения заявок",
            "text": "Какие антиспам-механизмы и ограничения по уникальности используются при саморегистрации?",
            "options": [
                {
                    "id": "Q006A1",
                    "text": "Может появляться CAPTCHA при подозрительной активности; повторная заявка с теми же e-mail и телефоном невозможна до отклонения.",
                    "is_correct": True,
                    "comment": "CAPTCHA защищает от перебора кодов, а уникальность контактов предотвращает дубликаты."
                },
                {
                    "id": "Q006A2",
                    "text": "Система блокирует любые повторные заявки, даже с другими контактами.",
                    "is_correct": False,
                    "comment": "Дубликаты с иными контактами возможны — это отдельно отмечено в демо."
                }
            ]
        },
        {
            "id": "Q007",
            "title": "Режимы обработки заявок",
            "text": "Какие есть режимы обработки заявок и чем они отличаются с точки зрения UX сотрудника?",
            "options": [
                {
                    "id": "Q007A1",
                    "text": "Ручной (организация рассматривает заявку позже) и интегрированный (ожидание решения онлайн; при одобрении — авто-редирект в кабинет через ~5 сек).",
                    "is_correct": True,
                    "comment": "В интегрированном режиме решение приходит быстро, экран ожидания сменяется автопереходом."
                },
                {
                    "id": "Q007A2",
                    "text": "Только ручной; интеграции с работодателем нет.",
                    "is_correct": False,
                    "comment": "В демо подробно описан второй, интегрированный сценарий."
                }
            ]
        },
        {
            "id": "Q008",
            "title": "Права администратора по заявкам",
            "text": "Что может и чего не может редактировать администратор в заявке перед принятием?",
            "options": [
                {
                    "id": "Q008A1",
                    "text": "Администратор может редактировать поля заявки, но не может менять e-mail и номер телефона, так как они подтверждены пользователем.",
                    "is_correct": True,
                    "comment": "Почта и телефон — верифицированные контакты; остальное можно корректировать."
                },
                {
                    "id": "Q008A2",
                    "text": "Администратор может менять любые поля, включая e-mail и телефон.",
                    "is_correct": False,
                    "comment": "Запрещено изменять подтверждённые контакты со стороны админа."
                }
            ]
        },
        {
            "id": "Q009",
            "title": "Письма по заявке",
            "text": "Что содержит письмо при одобрении заявки и есть ли авто-логин?",
            "options": [
                {
                    "id": "Q009A1",
                    "text": "Письмо содержит кнопку перехода; в первые сутки по ней доступен вход без логина/пароля один раз.",
                    "is_correct": True,
                    "comment": "В демо уточнено: по ссылке пускаем один раз без авторизации в течение ~24 часов."
                },
                {
                    "id": "Q009A2",
                    "text": "Письмо только уведомляет, вход всегда требует логин/пароль.",
                    "is_correct": False,
                    "comment": "Есть «магическая» ссылка с временным авто-логином."
                }
            ]
        },
        {
            "id": "Q010",
            "title": "Отчёт «Все заказы»",
            "text": "Какие возможности фильтрации/сборки есть у отчёта «Все заказы» и кому его нельзя отправлять?",
            "options": [
                {
                    "id": "Q010A1",
                    "text": "Можно выбирать период, статусы, несколько организаций и провайдеров (пересечение); опция «разбить суммы по кастомным кошелькам»; отчёт внутренний — не отправлять провайдерам и организациям.",
                    "is_correct": True,
                    "comment": "Отчёт содержит чувствительные данные (в т.ч. комиссии), поэтому предназначен для внутренних нужд."
                },
                {
                    "id": "Q010A2",
                    "text": "Отчёт формируется только по одной организации и обязательно делится с провайдером.",
                    "is_correct": False,
                    "comment": "Наоборот, поддерживаются множественные выборки, а делиться отчётом нельзя."
                }
            ]
        },
        {
            "id": "Q011",
            "title": "Отчёты провайдера",
            "text": "Чем функционал отчётов у провайдера отличается от отчётов организации?",
            "options": [
                {
                    "id": "Q011A1",
                    "text": "У провайдера теперь тоже есть формирование отчётов и расписания, но без фич по кошелькам/подразделениям/группам.",
                    "is_correct": True,
                    "comment": "Повторяет логику организации, кроме специфики, которой у провайдера нет."
                },
                {
                    "id": "Q011A2",
                    "text": "У провайдера отчётов нет вовсе.",
                    "is_correct": False,
                    "comment": "В релизе как раз добавили полноценные отчёты и расписания для провайдера."
                }
            ]
        },
        {
            "id": "Q012",
            "title": "НДС и чеки",
            "text": "Кто определяет ставку НДС в чеках и почему платформа должна её учитывать?",
            "options": [
                {
                    "id": "Q012A1",
                    "text": "Ставку НДС задаёт провайдер; платформа выступает агентом и выбивает чек от имени провайдера, соблюдая его систему налогообложения (в т.ч. сложные чеки).",
                    "is_correct": True,
                    "comment": "Прямо указано: чеки от имени провайдера, ставки НДС (включая 0%/не облагается и др.) — из настроек провайдера."
                },
                {
                    "id": "Q012A2",
                    "text": "НДС всегда 20% и его платит платформа.",
                    "is_correct": False,
                    "comment": "Неверно: ставка зависит от провайдера и номенклатуры, платформа — агент."
                }
            ]
        },
        {
            "id": "Q013",
            "title": "Удаление провайдера",
            "text": "В каких случаях доступно удаление провайдера из системы?",
            "options": [
                {
                    "id": "Q013A1",
                    "text": "Только если по провайдеру нет опубликованных услуг, заказов и финансовых действий.",
                    "is_correct": True,
                    "comment": "Иначе провайдер остаётся в системе для истории и не может быть удалён."
                },
                {
                    "id": "Q013A2",
                    "text": "Удаление доступно всегда, даже после заказов, для «чистки» списка.",
                    "is_correct": False,
                    "comment": "Противоречит правилам: при наличии активности удаление запрещено."
                }
            ]
        },
        {
            "id": "Q014",
            "title": "Заявки на вывод средств",
            "text": "Что нового появилось в обработке заявок на вывод средств в админке?",
            "options": [
                {
                    "id": "Q014A1",
                    "text": "Можно откатывать заявку на предыдущие статусы и указывать «дату фактической оплаты» (прошлую/будущую) — провайдер её не видит.",
                    "is_correct": True,
                    "comment": "Дата нужна для внутреннего учёта; видимость для провайдера не меняется."
                },
                {
                    "id": "Q014A2",
                    "text": "Провайдер теперь сам редактирует дату оплаты в заявке.",
                    "is_correct": False,
                    "comment": "Дата управляется админом и не отображается провайдеру."
                }
            ]
        },
        {
            "id": "Q015",
            "title": "История изменений провайдера",
            "text": "Зачем добавлена историчность в карточке провайдера и что фиксируется?",
            "options": [
                {
                    "id": "Q015A1",
                    "text": "Для связи документов при смене формы юрлица и условий; фиксируются кто, когда и что изменил (реквизиты, комиссии, НДС и т.п.).",
                    "is_correct": True,
                    "comment": "История помогает разбираться с изменениями ИП/ООО/СМЗ и сопоставлять документы."
                },
                {
                    "id": "Q015A2",
                    "text": "Чтобы автоматически удалять старые версии реквизитов без следа.",
                    "is_correct": False,
                    "comment": "Наоборот, цель — хранить и показывать историю изменений."
                }
            ]
        },
        {
            "id": "Q016",
            "title": "Бейджи услуг",
            "text": "Как работают бейджи «Новинка» и «Эксклюзив» и влияют ли они на ранжирование каталога?",
            "options": [
                {
                    "id": "Q016A1",
                    "text": "«Эксклюзив» включается вручную в карточке услуги; «Новинка» автоматически две недели с первой публикации, но может быть принудительно включён/выключен; на ранжирование не влияет, но есть фильтры по бейджам.",
                    "is_correct": True,
                    "comment": "Совпадает с описанным поведением; отображение возможно сразу двух бейджей."
                },
                {
                    "id": "Q016A2",
                    "text": "Бейджи всегда повышают позицию услуги в ленте.",
                    "is_correct": False,
                    "comment": "В демо подчёркнуто, что на ранжирование они не влияют."
                }
            ]
        },
        {
            "id": "Q017",
            "title": "Короткие ссылки и аналитика писем",
            "text": "Для чего внедряются короткие ссылки формата aldd.im и что видно во вкладке «Переходы» письма?",
            "options": [
                {
                    "id": "Q017A1",
                    "text": "Для экономии SMS и инкапсуляции длинных токенов; при переходе разворачиваются в домен организации; во вкладке «Переходы» видно факты открытия письма и клики по ссылкам (IP/устройство).",
                    "is_correct": True,
                    "comment": "Доставка письма как таковая не подтверждается, но открытие/клики регистрируются."
                },
                {
                    "id": "Q017A2",
                    "text": "Чтобы маскировать домен от пользователей; во вкладке «Переходы» отображается только статус доставки.",
                    "is_correct": False,
                    "comment": "Система не показывает статус доставки, а фиксирует открытия и клики."
                }
            ]
        },
        {
            "id": "Q018",
            "title": "Категория «Новое» vs бейдж «Новинка»",
            "text": "Чем сейчас отличается логика категории «Новое» в каталоге от бейджа «Новинка»?",
            "options": [
                {
                    "id": "Q018A1",
                    "text": "«Новинка» — 2 недели с первой публикации услуги (с возможностью принудительного управления); категория «Новое» формируется по дате регистрации провайдера и сейчас может показывать диссонанс — вопрос в проработке.",
                    "is_correct": True,
                    "comment": "Категория шире бейджа по временным рамкам."
                },
                {
                    "id": "Q018A2",
                    "text": "Это одно и то же — просто разные названия.",
                    "is_correct": False,
                    "comment": "Разные временные интервалы и логика отображения."
                }
            ]
        },
        {
            "id": "Q019",
            "title": "Настройка писем организации",
            "text": "Какими возможностями обладает организация для кастомизации автоматических писем системы?",
            "options": [
                {
                    "id": "Q019A1",
                    "text": "Организация может менять шаблоны писем, добавлять свои поля, встраивать логотип и подпись; у системы есть набор стандартных шаблонов как основа.",
                    "is_correct": True,
                    "comment": "Гибкий механизм персонализации коммуникаций под бренд организации."
                },
                {
                    "id": "Q019A2",
                    "text": "Письма генерируются автоматически и не подлежат редактированию.",
                    "is_correct": False,
                    "comment": "Противоречит функциональности кастомизации, добавленной в систему."
                }
            ]
        }
    ]

def clear_existing_questions():
    """Clear existing questions from the system"""
    headers = {"X-Admin-Key": ADMIN_API_KEY}
    
    try:
        response = requests.delete(f"{API_BASE_URL}/admin/questions/clear", headers=headers)
        if response.status_code == 200:
            print("✅ Successfully cleared all existing questions")
        else:
            print(f"⚠️ Failed to clear questions: {response.status_code}")
            
    except requests.RequestException as e:
        print(f"⚠️ Error clearing questions: {e}")

def upload_questions(questions: List[Dict[str, Any]]) -> bool:
    """Upload questions to the API using the import endpoint"""
    headers = {
        "Content-Type": "application/json",
        "X-Admin-Key": ADMIN_API_KEY
    }
    
    try:
        # Use the import endpoint which expects a list of questions
        response = requests.post(
            f"{API_BASE_URL}/admin/questions/import",
            json=questions,
            headers=headers
        )
        
        if response.status_code == 200:
            print(f"✅ Successfully imported all {len(questions)} questions")
            return True
        else:
            print(f"❌ Failed to import questions: {response.status_code} - {response.text}")
            return False
            
    except requests.RequestException as e:
        print(f"❌ Error uploading questions: {e}")
        return False

def verify_questions():
    """Verify that questions were uploaded successfully"""
    headers = {"X-Admin-Key": ADMIN_API_KEY}
    
    try:
        response = requests.get(f"{API_BASE_URL}/admin/questions", headers=headers)
        if response.status_code == 200:
            questions = response.json()
            print(f"✅ Verified: {len(questions)} questions in the system")
            
            # Show first few questions as sample
            for i, question in enumerate(questions[:5]):
                print(f"   {i+1}. {question['id']}: {question['title']}")
            if len(questions) > 5:
                print(f"   ... и ещё {len(questions) - 5} вопросов")
            return True
        else:
            print(f"❌ Failed to verify questions: {response.status_code}")
            return False
    except requests.RequestException as e:
        print(f"❌ Error verifying questions: {e}")
        return False

def main():
    """Main function to load all questions"""
    print("🚀 Загружаю все 19 вопросов в систему...")
    
    # Check API connectivity
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            print("✅ API server работает")
        else:
            print("❌ API server не отвечает")
            return False
    except requests.RequestException:
        print("❌ Не могу подключиться к API серверу")
        return False
    
    # Get all questions
    questions = get_all_questions()
    print(f"📝 Подготовлено {len(questions)} вопросов")
    
    # Clear existing questions
    print("🧹 Очищаю существующие вопросы...")
    clear_existing_questions()
    
    # Upload new questions
    print("⬆️ Загружаю новые вопросы...")
    success = upload_questions(questions)
    
    if success:
        print("🔍 Проверяю загрузку...")
        verify_questions()
        print("✅ Все вопросы успешно загружены!")
        return True
    else:
        print("❌ Некоторые вопросы не удалось загрузить")
        return False

if __name__ == "__main__":
    main()